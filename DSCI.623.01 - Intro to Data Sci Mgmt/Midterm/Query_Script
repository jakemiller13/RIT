#!/usr/local/bin/bash

# Datasets used:
# https://www.kaggle.com/mylesoneill/world-university-rankings
# https://www.kaggle.com/burhanykiyakoglu/infant-mortality-fertility-income
# https://www.kaggle.com/START-UMD/gtd

echo "${BASH_VERSION}"

# Make relevant directories
mkdir Temp_Files
mkdir Cleaned_Data
mkdir Saved_Files

# Check if user needs to clean/compile files, else skip all cleansing
read -p "Do you need to compile clean data files [y/n]? " compile

# Only run all of this if user needs to
if [ "$compile" = "y" ]; then

	echo --- Compiling ---

	# Convert all CSV files to TSV and save in Temp_Files
	csv2tsv Raw_Data/education_expenditure_supplementary_data.csv > Temp_Files/tsv_Education.tsv
	csv2tsv Raw_Data/MortalityFertilityIncome.csv > Temp_Files/tsv_MortFertInc.tsv
	csv2tsv Raw_Data/globalterrorismdb_0718dist.csv > Temp_Files/tsv_Terrorism.tsv

	# Education: remove random extra beginning spaces
	sed -E "s/^[[:space:]]+//g" Temp_Files/tsv_Education.tsv > Temp_Files/noSpaceEdu.tsv

	# Education: only take Public, All Institutions, after 2000
	tsv-filter --header --str-eq 2:"All Institutions " --str-eq 3:"Public" < Temp_Files/noSpaceEdu.tsv | cut -f 1,5-11 > Cleaned_Data/Education.tsv

	# M/F/I: Swap commas for periods, remove m/f/i prefix from date column titles
	sed -E "s/,/./g" < Temp_Files/tsv_MortFertInc.tsv | sed -E "1 s/(m|f|i)2/2/g" > Temp_Files/noPreMortFertInc.tsv

	# M/F/I: Separate into Mortality, Fertility, Income files, after 2000
	cut -f 1,34-50 Temp_Files/noPreMortFertInc.tsv > Cleaned_Data/Mortality.tsv
	cut -f 1,81-97 Temp_Files/noPreMortFertInc.tsv > Cleaned_Data/Fertility.tsv
	cut -f 1,128-144 Temp_Files/noPreMortFertInc.tsv > Cleaned_Data/Income.tsv

	# Terrorism: take columns iyear, country_txt, success. Move country_txt to first column
	tsv-filter --header --str-eq 27:1 < Temp_Files/tsv_Terrorism.tsv | tsv-select -f 9,2,27 > Temp_Files/sortTerror.tsv

	# Terrorism: group by country, incidences per year, for years after 2000
	tsv-summarize --header --group-by 1,2 --count < Temp_Files/sortTerror.tsv | tsv-filter --header --ge 2:2000 > Temp_Files/groupTerror.tsv

	# Terrorism: create countries and years arrays, tail portion takes everything but header
	countries=( $(tsv-summarize --header --unique-values 1 < Temp_Files/groupTerror.tsv | tail -n +2) )
	years=( $(tsv-summarize --header --unique-values 2 < Temp_Files/groupTerror.tsv | tail -n +2) )

	# Terrorism: search groupTerror.tsv for country/year combination and add to file
	IFS="|"
	mkfile b Temp_Files/TerrorSpace.tsv
	echo "Country ${years[@]}" | sed "s/|/ /g" >> Temp_Files/TerrorSpace.tsv
	for country in `echo "${countries[@]}"`; do
		terror_counts=("$country")
		for year in `echo "${years[@]}"`; do
			if [ -n "$(tsv-filter --str-eq 1:"$country" --str-eq 2:"$year" < Temp_Files/groupTerror.tsv)" ]; then
				# echo "$year" "$country" --Not-- Empty
				terror_counts+=( $( tsv-filter --str-eq 1:"${country}" --str-eq 2:"${year}" < Temp_Files/groupTerror.tsv | cut -f 3) )
			else
				# echo "$year $country Empty"
				terror_counts+=(0)
			fi
		done
		echo ${terror_counts[*]} >> Temp_Files/TerrorSpace.tsv
	done
	IFS=" "

	# Terrorism: replace spaces with tabs
	sed -E "s/ [0-9]/	&/g" < Temp_Files/TerrorSpace.tsv > Cleaned_Data/Terrorism.tsv
fi

# Print available TSV files to compare
echo "Files available: "
IFS="/"
file_array=()
file_names=()
for file in $ls Cleaned_Data/*; do
	read -ra name <<< "$file"
	spl_name=${name[${#name[@]}-1]}
	file_array+=($spl_name)
	file=[${spl_name:0:1}]${spl_name:1:${#spl_name}-5}
	file_names+=($file)
done
echo ${file_names[@]} [D]one
IFS=" "

# Files have different number of columns to join
declare -A col_arr=( [E_col]=6 [M_col]=18 [F_col]=18 [I_col]=18 [T_col]=19 )

# First file to compare
read -p "Which file would you like to use as base? " file_1

# Remove requested file from file_names
if [ "$file_1" = "D" ]; then
	file_1=
else
	for file in "${!file_names[@]}"; do
		if [ "${file_names[file]:1:1}" = "$file_1" ]; then
			file_1=${file_array[file]}
			for col in "${!col_arr[@]}"; do
				if [ "${file_names[file]:1:1}" = "${col:0:1}" ]; then
					col_1=${col_arr[$col]}
					pre_1="${col:0:1}_"
				fi
			done
			unset "file_names[file]"
		fi
	done

	# Second file to compare
	echo "Files available: "
	echo ${file_names[@]} [D]one

	read -p "Which file would you like to compare? " file_2
	if [ "$file_2" = "D" ]; then
		file_2=
		echo "Done"
	else
		for file in "${!file_names[@]}"; do
			if [ "${file_names[file]:1:1}" = "$file_2" ]; then
				file_2=${file_array[file]}
				for col in "${!col_arr[@]}"; do
					if [ "${file_names[file]:1:1}" = "${col:0:1}" ]; then
						col_2=${col_arr[$col]}
						pre_2="${col:0:1}_"
					fi
				done
				unset "file_names[file]"
			fi
		done

		# Third file to compare
		echo "Files available: "
		echo ${file_names[@]} [D]one

		read -p "Would you like to compare a third file? " file_3
		if [ "$file_3" = "D" ]; then
			file_3=
			echo "Done"
		else
			for file in "${!file_names[@]}"; do
				if [ "${file_names[file]:1:1}" = "$file_3" ]; then
					file_3=${file_array[file]}
					for col in "${!col_arr[@]}"; do
						if [ "${file_names[file]:1:1}" = "${col:0:1}" ]; then
							col_3=${col_arr[$col]}
							pre_3="${col:0:1}_"
						fi
					done
				fi
			done
		fi
	fi
fi

# Join files depending on how many files user would like joined
if [ -n "$file_3" ]; then
	echo "3 files selected to join"
	file_name="${file_1:0:3}_${file_2:0:3}_${file_3:0:3}"
	tsv-join -z --filter-file Cleaned_Data/${file_2} --header --key-fields 1 --append-fields 2-$col_2 --prefix $pre_2 Cleaned_Data/${file_1} > Temp_Files/Temp_Combo.tsv
	tsv-join -z --filter-file Cleaned_Data/${file_3} --header --key-fields 1 --append-fields 2-$col_3 --prefix $pre_3 Temp_Files/Temp_Combo.tsv > Saved_Files/"$file_name".tsv
	rm Temp_Files/Temp_Combo.tsv
elif [ -n "$file_2" ]; then
	echo "2 files selected to join"
	file_name="${file_1:0:3}_${file_2:0:3}"
	tsv-join -z --filter-file Cleaned_Data/${file_2} --header --key-fields 1 --append-fields 2-$col_2 --prefix $pre_2 Cleaned_Data/${file_1} > Saved_Files/"$file_name".tsv
elif [ -n "$file_1" ]; then
	echo "1 file selected to view. No files selected to join"
	file_name=${file_1:0:${#file_1}-4}
else
	echo "No files selected. Exiting."
fi

# Look at specific country if user would like
if [ -n "$file_name" ]; then
	read -p "Would you like to look at a specific country [y/n]? " ask_country
	if [ "$ask_country" = "y" ]; then
		read -p "What country would you like to look at? " country
		sed -e "1p" -e "/$country/!d" Saved_Files/"$file_name".tsv > Saved_Files/"${country}_${file_name}".tsv
	fi
fi

# Remove created directories, but leave Cleaned_Data
read -p "Delete temporary files [y/n]? " delete
if [ "$delete" = "y" ]; then
	rm -iR Temp_Files
fi