import numpy as np
import matplotlib.pyplot as plt
import scipy.stats


def prob_func(n, y, pi):
    P_y = np.math.factorial(n) /\
          (np.math.factorial(y) * np.math.factorial(n - y)) * pi ** y\
          * (1 - pi) ** (n - y)
    return P_y


def reject(p_value):
    if p_value <= 0.05:
        return 'Yes'
    else:
        return 'No'


#############
# Problem 1 #
#############
def problem_1a():
    pi = np.arange(0, 1, 0.01)
    ll = []
    for i in pi:
        ll.append(prob_func(30, 26, i))
    plt.plot(pi, ll)
    plt.savefig('problem_1a.jpg')
    print('MLE of pi: {}'.format(pi[np.argmax(ll)]))


def problem_1b(n, y, pi_0):
    pi_hat = y / n

    # Wald
    wald_se = np.sqrt(pi_hat * (1 - pi_hat) / n)
    wald_z = ((pi_hat - pi_0) - 1 / (2 * n)) / wald_se
    wald_p = scipy.stats.distributions.chi2.sf(wald_z ** 2, 1)
    print('Wald z: {} | Wald p: {} | Reject: {}'.format(np.round(wald_z, 5),
                                                        np.round(wald_p, 5),
                                                        reject(wald_p)))

    # Score
    score_se = np.sqrt(pi_0 * (1 - pi_0) / n)
    score_z = (pi_hat - pi_0) / score_se
    score_p = scipy.stats.distributions.chi2.sf(score_z ** 2, 1)
    print('Score z: {} | Score p: {} | Reject: {}'.format(np.round(score_z, 5),
                                                          np.round(score_p, 5),
                                                          reject(score_p)))

    # Exact
    exact_p = sum([prob_func(n, i, pi_0) for i in range(y, n + 1)])
    print('Exact p: {} | Exact 2*p: {} | Reject: {}'.format(
                                                     np.round(exact_p, 5),
                                                     np.round(2 * exact_p, 5),
                                                     reject(2 * exact_p)))

    # Likelihood
    ll_0 = prob_func(n, y, pi_0)
    ll_1 = prob_func(n, y, y / n)
    ll_ratio = 2 * np.log(ll_1 / ll_0)
    ll_p = 1 - scipy.stats.chi2.cdf(ll_ratio, 1)
    print('Likelihood ratio: {} | Likelihood p: {} | Reject: {}'.format(
           np.round(ll_ratio, 5),
           np.round(ll_p, 5),
           reject(ll_p)))


def problem_1c(n, y, pi_0):
    pi_hat = y / n
    z_alpha = 1.96

    # Wald
    wald_se = np.sqrt(pi_hat * (1 - pi_hat) / n)
    wald_ci = [pi_hat - z_alpha * wald_se, pi_hat + z_alpha * wald_se]
    print('Wald CI: {}'.format(np.round(wald_ci, 5)))

    # Score
    score_se = np.sqrt(pi_0 * (1 - pi_0) / n)
    score_ci = [pi_hat - z_alpha * score_se, pi_hat + z_alpha * score_se]
    print('Score CI: {}'.format(np.round(score_ci, 5)))

    # Likelihood
    pi_range = np.arange(0, 1, 0.01)
    gllr = np.round(np.log(2 * np.log(prob_func(n, y, y / n) /
                                      prob_func(n, y, pi_range))), 4)
    min_indices = np.abs(gllr - 1.92).argsort()
    ll_ci = np.array(min_indices[0])
    for i in min_indices:
        if abs(i - min_indices[0]) > 5:
            ll_ci = np.append(ll_ci, i)
            break
    print('Likelihood CI: {}'.format(ll_ci / 100))


def problem_1d():
    print('Exact test. Approximate tests do not agree, therefore likely an '
          'issue with normal approximation. Approximate tests do not work '
          'well without normal approximation')


#############
# Problem 2 #
#############
def problem_2a():
    print('              Actual  ')
    print('             +      - ')
    print('Predicted + 224    100')
    print('          - 126    150')

    print('sensitivity = true positive rate = TP / (TP + FN)')
    print('224 / (224 + 126) = 0.64')


def problem_2b():
    print(problem_1c(350, 224, 224 / 350))


def problem_2c():
    print('I personally do not feel very confident with a health test '
          'with this level of false-negatives.')


#############
# Problem 3 #
#############
def problem_3():
    problem_1b(15, 8, 0.7)
    print('4 out of 4 tests fail to reject null hypothesis, therefore I '
          'cannot disagree with the claim.')